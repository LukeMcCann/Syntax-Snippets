Using promises over callbacks allows for the implicit handling of exceptions/errors within asynchronous code blocks. 

This is done via the .catch() method on the end of the promise chain:

router.post('/create', (req, res, next) => {
  .then(result => {
    return result
   })
   .then(user => res.json(user))
   .catch(next)
})


try/catch statements are of course an alternative to catching exceptions as in any other language.

router.get('/search', (req, res) => {
 
  setImmediate(() => {
    const jsonStr = req.query.params
    try {
      const jsonObj = JSON.parse(jsonStr)
      
      res.send('Success')
    } catch (e) {
      res.status(400).send('Invalid JSON string')
    }
  })
})

