useful source: https://www.youtube.com/watch?v=jncc3QL8RWI

Packages during initial install
sudo, git, vim, base, linux, linux-firmware

necessary packages
sudo pacman -S --needed base-devel

yay Config
https://www.tecmint.com/install-yay-aur-helper-in-arch-linux-and-manjaro/

glxinfo 
yay -S glxinfo

# Installing Nvidia Drivers

First we need to check which GPU we are running

lspci -k | grep -A 2 -E "(VGA|3D)"

In some cases you will see two, this is a hybrid GPU, for me this is an integrated intel and nvidia GPU in my laptop. 

The following steps will ensure that we can use both.

check your drivers are compatible: 
https://nouveau.freedesktop.org/CodeNames.html
https://wiki.archlinux.org/title/PRIME#Closed-source_drivers

install drivers:
sudo pacman -S nvidia nvidia-utils nvidia-settings

Since xorg v 127 the xorg config is no longer needed because the options are included in the driver directly.

We do need to install nvidia-prime however

sudo pacman -S nvidia-prime


We can then reboot

and test via

sudo prime-run glxinfo | grep "OpenGL renderer"

the output expected: 
OpenGL renderer string: NVIDIA GeForce RTX 2070/PCIe/SSE2


# Managing the GPU

You can check which GPU is being used in KDE in the info centre. 

For me at this point this shows my intel GPU the enxt steps will let us swap between nvidia and intel.

we can switch to our Nvidia gpu using: prime-run program

This is a manual method doing this from the terminal.


# Optimus

https://wiki.archlinux.org/title/NVIDIA_Optimus

yay -S optimus-manager

We can use the optimus manager to control which GPU we use as well
, prime-offload will let us do this on a per application basis, optimus
can be set to use the GPU anytime we please, and also comes with a KDE widget.

https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa1k5eDFlRE1SQTdGMXQtUTdFczRFUlpLS0RxUXxBQ3Jtc0tsei1SbnBvb0VzWm9famYyRExoai1qNEZZVlBickNTcmVzcnBVc2h3RmZSUDFWRU03OVJmU0tBQmpic3hiVWp1MGVUY3k1cE45YWlFYXc5WmFvX3h5SnltVGhiOU41REJPRUVuM2hPNUVZaFBzei1KUQ&q=https%3A%2F%2Fgithub.com%2FAskannz%2Foptimus-manager&v=jncc3QL8RWI

yay -S optimus-manager optimus-manager-qt

There is also a gnome version of the widget called: optimus-manager-indicator

We can then contorl our GPU via optimus-manager either within the widget
or via the terminal

optimus-manager --switch nvidia
optimus-manager --switch intel 
optimus-manager --switch hybrid


# Power Management

It is important to manually configure power management. Prior to this 
the GPU will remain on and consuming power as it is disabled by default since v1.2
we must however be careful as incorrect configuration can break the boot process.


I am using the latest driver and have a Turing generation GPU and coffee lake cpu, 
therefore I can use the following method:

Temporary config can be made to prevent the chance of lockup:
optimus-manager --temp-config path/to/file.conf

main changes should be stored in:
/etc/optimus-manager/optimus-manager.conf

https://github.com/Askannz/optimus-manager/wiki/A-guide--to-power-management-options



# enable multilib

sudo vin /etc/pacman.conf

uncomment multilib

sudo pacman -Syy



# Install Brave

yay -Sy brave 


# Install Steam

pacman -Sy steam


# install docker 

pacman -Sy docker

sudo systemctl enable docker.service
sudo systemctl enable containerd.service

sudo systemctl start docker.service
sudo systemctl start containerd.service

sudo groupadd docker 
sudo usermod -aG docker $USER

logout



# VSCode

This version of VScode is proprietary and allows use of marketplace extensions. 
The official arch distro does not have access to the marketplace which is VSCodes biggest strength.

yay -Sy visual-studio-code-bin



# Bash Colors

https://averagelinuxuser.com/linux-terminal-color/
https://averagelinuxuser.com/linux-terminal-color/





# Mounting SSd

We can mount an ssd via Mount

to do so we first create a mount point

mkdir /mnt/storage


then we can mount the filesystem


mount /dev/sda1

if this fails we may need to format our filesystem

mfks.ext4 /dev/sda1



We can mount on boot by adding this entry to our fstab

we can use blkid to derive information about our FS


we need the UUID, the directory it is mounted to, the filesystem type,the options, and the dynp and pass

UUID=231237216312637213   /mnt/storage     ext4    rw,user,auto   0 0





# Quiet boot

update the grub conf at: /etc/default/grub

change timeout to 0 

change CMDLINE_DEFAULT to splash


run: sudo grub-mkconfig -o /boot/grub/grub.cfg



# Reflector automatic mirror updates:
https://joshtronic.com/2021/03/14/automatically-update-arch-linux-mirrors/




# LTS Kernel

umane -r

Install an LTS kernel and reconfigure grub:
sudo pacman -S linux-lts
sudo grub-mkconfig -o /boot/grub/grub.cfg


sudo pacman -Rs linux




# Microcode

sudo pacman -S intel-ucode

sudo grub-mkconfig -o /boot/grub/grub.cfg
